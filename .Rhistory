knitr::opts_chunk$set(echo = TRUE)
if (!require("quantmod")) install.packages("quantmod")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("fBasics")) install.packages("fBasics")
if (!require("tseries")) install.packages("tseries")
if (!require("urca")) install.packages("urca")
library(quantmod)
library(tidyverse)
library(fBasics)
library(tseries)
library(urca)
# Télécharger les données du CAC 40
cac40 <- getSymbols("^FCHI", src = "yahoo", from = "1990-01-01", to = "2023-12-31", auto.assign = FALSE)
# Extraire uniquement les prix de clôture
cac40_close <- na.omit(Cl(cac40))  # 'Cl()' extrait la colonne de clôture
#nous pouvons également considérer d'autres indicateurs tq le max sur la journée, le min...
colnames(cac40_close) <- "Close"
#Visualisation de la série
autoplot(cac40_close) +
ggtitle("Indice CAC 40 pour la période 1990-2023") +
xlab("Date") +
ylab("Clôture") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Vérifier s'il y a des valeurs manquantes dans la série
missing_values <- sum(is.na(cac40_close))
# Afficher le nombre de valeurs manquantes
print(paste("Nombre de valeurs manquantes :", missing_values))
# Si des valeurs manquantes existent, afficher leurs dates
if (missing_values > 0) {
missing_dates <- index(cac40_close)[is.na(cac40_close)]
print("Dates avec valeurs manquantes :")
print(missing_dates)
} else {
print("Aucune valeur manquante dans la série.")
}
basicStats(cac40_close)
#graphiquement
# Ajouter une tendance linéaire
autoplot(cac40_close) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle("Tendance linéaire de l'indice CAC 40") +
xlab("Date") +
ylab("Clôture") +
theme_minimal()
#avec le R**2
# Créer une variable temporelle
time <- as.numeric(index(cac40_close))
# Ajuster un modèle linéaire : Prix ~ Temps
lm_model <- lm(coredata(cac40_close) ~ time)
# Résumé du modèle
summary(lm_model)
# Convertir la série en périodicité mensuelle
cac40_monthly <- to.monthly(cac40_close, indexAt = "lastof", OHLC = FALSE)
# Visualisation des moyennes mensuelles
cac40_monthly_mean <- aggregate(cac40_monthly, as.yearmon, mean)
autoplot(cac40_monthly_mean) +
ggtitle("Moyennes mensuelles de l'indice CAC 40") +
xlab("Date") +
ylab("Moyenne mensuelle de clôture") +
theme_minimal()
# Détection visuelle avec boxplot
boxplot(coredata(cac40_close), main = "Détection des outliers",
ylab = "Prix de clôture", col = "lightblue")
# Repérer les outliers par quantile
q1 <- quantile(cac40_close, 0.25)
q3 <- quantile(cac40_close, 0.75)
iqr <- q3 - q1
outliers <- cac40_close[cac40_close < (q1 - 1.5 * iqr) | cac40_close > (q3 + 1.5 * iqr)]
print("Outliers détectés :")
print(outliers)
# Calcul des rendements logarithmiques
log_returns <- diff(log(cac40_close))
# Visualisation des rendements
autoplot(log_returns) +
ggtitle("Rendements logarithmiques du CAC 40") +
xlab("Date") +
ylab("Log-returns") +
theme_minimal()
# Statistiques descriptives des rendements
basicStats(log_returns)
# Histogramme des rendements
ggplot(data = data.frame(log_returns = coredata(log_returns)), aes(x = log_returns)) +
geom_histogram(bins = 50, fill = "lightblue", color = "black") +
ggtitle("Distribution des rendements logarithmiques") +
xlab("Log-returns") +
ylab("Fréquence") +
theme_minimal()
# Calcul des log-returns
log_returns <- diff(log(cac40_close))
# Test ADF sur les rendements logarithmiques
adf_test <- adf.test(na.omit(log_returns))
# Afficher les résultats du test
print(adf_test)
# Calcul des log-returns
log_returns <- diff(log(cac40_close))
# Test KPSS sur les rendements logarithmiques
kpss_test <- ur.kpss(na.omit(log_returns))
# Résumé des résultats
summary(kpss_test)
knitr::opts_chunk$set(echo = TRUE)
# Installation et chargement des packages nécessaires
if (!require("quantmod")) install.packages("quantmod")
if (!require("extRemes")) install.packages("extRemes")
if (!require(tseries)) install.packages("tseries")
if (!require(evd)) install.packages("evd")
library(evd)
library(quantmod)
library(extRemes)
library(tseries)
# Importation des données de l'indice S&P 500
getSymbols("^GSPC", src = "yahoo", from = "1965-01-01")
# Importation des données de l'indice S&P 500
getSymbols("^GSPC", src = "yahoo", from = "1965-01-01")
# Importation des données de l'indice S&P 500
getSymbols("^GSPC", src = "yahoo", from = "1965-01-01", to = "2024-12-01")
# Installation et chargement des packages nécessaires
if (!require("quantmod")) install.packages("quantmod")
if (!require("extRemes")) install.packages("extRemes")
if (!require(tseries)) install.packages("tseries")
if (!require(evd)) install.packages("evd")
library(evd)
library(quantmod)
library(extRemes)
library(tseries)
# Importation des données de l'indice S&P 500
getSymbols("^GSPC", src = "yahoo", from = "1965-01-01", to = "2024-12-01")
knitr::opts_chunk$set(echo = TRUE)
# Installation et chargement des packages nécessaires
if (!require("quantmod")) install.packages("quantmod")
if (!require("extRemes")) install.packages("extRemes")
if (!require(tseries)) install.packages("tseries")
if (!require(evd)) install.packages("evd")
library(evd)
library(quantmod)
library(extRemes)
library(tseries)
# Importation des données de l'indice S&P 500
getSymbols("^GSPC", src = "yahoo", from = "1965-01-01", to = "2024-12-01")
sp500_close <- Cl(GSPC)
sp500_returns <- dailyReturn(sp500_close)
# Visualisation de la série temporelle des prix de clôture ajustés
plot(sp500_close, main = "Série temporelle des prix de clôture du S&P 500",
ylab = "Prix de clôture ajusté", col = "blue")
# Visualisation de la série temporelle des rendements quotidiens
plot(sp500_returns, main = "Série temporelle des rendements quotidiens du S&P 500",
ylab = "Rendements quotidiens", col = "orange")
# Histogramme des rendements quotidiens
hist(sp500_returns, breaks = 100, main = "Histogramme des rendements quotidiens du S&P 500",
xlab = "Rendements quotidiens", col = "purple", probability = TRUE)
adf_test <- adf.test(sp500_returns)
# Résultats
print(adf_test)
# Définition des blocs (annuels)
block_size <- 252  # Nombre de jours de bourse dans une année
# Calcul des maxima pour chaque bloc annuel
maxima <- tapply(sp500_returns, (1:length(sp500_returns) - 1) %/% block_size, max)
# Suppression des NA potentiels
maxima <- na.omit(maxima)
adf_test_max <- adf.test(maxima)
# Résultats
print(adf_test_max)
# Visualisation des maxima
plot(maxima, type = "b", main = "Maxima annuels des rendements quotidiens du S&P 500",
xlab = "Années (blocs)", ylab = "Maxima", col = "blue", pch = 19)
# Ajustement d'un modèle de distribution aux maxima (utilisation de la distribution GEV)
fitted <- fgev(maxima)
# Résultats du modèle
summary(fitted)
rl(fitted)
qq(fitted)
# PP-plot
pp(fitted, main = "PP-Plot pour l'ajustement GEV",
xlab = "Probabilités empiriques", ylab = "Probabilités théoriques",
col = "blue")
# Tracé de la densité des données empiriques et du modèle ajusté
hist(maxima, breaks = 10, probability = TRUE, main = "Density Plot",
xlab = "Maxima annuels", col = "lightgray", border = "white")
lines(density(maxima), col = "blue", lwd = 2)  # Densité empirique
curve(dgev(x, loc = fitted$estimate["loc"],
scale = fitted$estimate["scale"],
shape = fitted$estimate["shape"]),
add = TRUE, col = "red", lwd = 2)  # Densité GEV ajustée
legend("topright", legend = c("Empirique", "GEV ajusté"),
col = c("blue", "red"), lwd = 2, bty = "n")
plot(profile(fitted))
# Ajustement du modèle GEV avec paramètre de forme libre
model_free <- fgev(maxima)
# Ajustement du modèle avec le paramètre de forme fixé à 0 (modèle Gumbel)
model_gumbel <- fgev(maxima, shape = 0)
# Comparaison des AIC
aic_free <- AIC(model_free)
aic_gumbel <- AIC(model_gumbel)
cat("AIC du modèle GEV (paramètre de forme libre) :", aic_free, "\n")
cat("AIC du modèle Gumbel (paramètre de forme = 0) :", aic_gumbel, "\n")
if (aic_free < aic_gumbel) {
cat("Le modèle GEV (paramètre de forme libre) est meilleur selon l'AIC.\n")
} else {
cat("Le modèle Gumbel (paramètre de forme = 0) est meilleur selon l'AIC.\n")
}
# Test de vraisemblance (Likelihood Ratio Test)
lr_stat <- 2 * (logLik(model_free) - logLik(model_gumbel))
p_value <- pchisq(lr_stat, df = 1, lower.tail = FALSE)
cat("Statistique de test du rapport de vraisemblance :", lr_stat, "\n")
cat("P-valeur :", p_value, "\n")
if (p_value < 0.05) {
cat("Le modèle GEV (paramètre de forme libre) est significativement meilleur.\n")
} else {
cat("Aucune différence significative entre les deux modèles.\n")
}
# Définition des blocs (annuels)
block_size <- 252  # Nombre de jours de bourse dans une année
# Calcul des maxima pour chaque bloc annuel
maxima <- tapply(sp500_returns, (1:length(sp500_returns) - 1) %/% block_size, max)
# Suppression des NA potentiels
maxima <- na.omit(maxima)
# Suppression des 3 plus grandes valeurs en conservant l'ordre
threshold <- sort(maxima, decreasing = TRUE)[4]  # Quatrième plus grande valeur
maxima_trimmed <- maxima[maxima <= threshold]  # Conserve les valeurs ≤ threshold
# Test ADF sur la série tronquée
adf_test_max_trimmed <- adf.test(maxima_trimmed)
# Résultats
print(adf_test_max_trimmed)
# Visualisation des maxima tronqués
plot(maxima_trimmed, type = "b", main = "Maxima annuels (sans les 3 plus grandes valeurs)",
xlab = "Années (blocs)", ylab = "Maxima", col = "blue", pch = 19)
# Ajustement d'un modèle de distribution aux maxima tronqués (utilisation de la distribution GEV)
fitted_trimmed <- fgev(maxima_trimmed)
# Résultats du modèle
summary(fitted_trimmed)
plot(profile(fitted_trimmed))
# QQ-plot pour les données tronquées
qq(fitted_trimmed)
# PP-plot pour les données tronquées
pp(fitted_trimmed, main = "PP-Plot pour l'ajustement GEV (tronqué)",
xlab = "Probabilités empiriques", ylab = "Probabilités théoriques",
col = "blue")
# Tracé de la densité des données empiriques et du modèle ajusté (tronqué)
hist(maxima_trimmed, breaks = 10, probability = TRUE, main = "Density Plot (tronqué)",
xlab = "Maxima annuels", col = "lightgray", border = "white")
lines(density(maxima_trimmed), col = "blue", lwd = 2)  # Densité empirique
curve(dgev(x, loc = fitted_trimmed$estimate["loc"],
scale = fitted_trimmed$estimate["scale"],
shape = fitted_trimmed$estimate["shape"]),
add = TRUE, col = "red", lwd = 2)  # Densité GEV ajustée
legend("topright", legend = c("Empirique", "GEV ajusté (tronqué)"),
col = c("blue", "red"), lwd = 2, bty = "n")
logLik(fitted)  # Modèle avec les 3 grosses valeurs
logLik(fitted_trimmed)  # Modèle sans les 4 grosses valeurs
AIC(fitted)  # Modèle avec les 3 grosses valeurs
AIC(fitted_trimmed)  # Modèle sans les 3 grosses valeurs
# Comparaison des QQ-Plots
par(mfrow = c(1, 2))  # Disposition : 1 ligne, 2 colonnes
# QQ-Plot pour le modèle avec les 3 grosses valeurs
qq(fitted, main = "QQ-Plot (avec 3 grosses valeurs)",
xlab = "Quantiles empiriques", ylab = "Quantiles théoriques", col = "blue")
# QQ-Plot pour le modèle sans les 3 grosses valeurs
qq(fitted_trimmed, main = "QQ-Plot (sans 3 grosses valeurs)",
xlab = "Quantiles empiriques", ylab = "Quantiles théoriques", col = "red")
# Réinitialisation des paramètres graphiques
par(mfrow = c(1, 2))  # Garder la disposition pour les PP-Plots
# Comparaison des PP-Plots
pp(fitted, main = "PP-Plot (avec 3 grosses valeurs)",
xlab = "Probabilités empiriques", ylab = "Probabilités théoriques", col = "blue")
pp(fitted_trimmed, main = "PP-Plot (sans 3 grosses valeurs)",
xlab = "Probabilités empiriques", ylab = "Probabilités théoriques", col = "red")
# Réinitialisation pour éviter d'affecter d'autres tracés
par(mfrow = c(1, 1))  # Retour à une disposition par défaut
# Comparaison des RL-Plots
par(mfrow = c(1, 2))  # Disposition : 1 ligne, 2 colonnes
# RL-Plot pour le modèle avec les 3 grosses valeurs
rl(fitted, main = "Niveaux de retour (avec 3 grosses valeurs)",
xlab = "Périodes de retour (années)", ylab = "Rendements", col = "blue")
# RL-Plot pour le modèle sans les 3 grosses valeurs
rl(fitted_trimmed, main = "Niveaux de retour (sans 3 grosses valeurs)",
xlab = "Périodes de retour (années)", ylab = "Rendements", col = "red")
# Comparaison des Density Plots
par(mfrow = c(1, 2))  # Garder la disposition pour les Density Plots
# Density Plot pour le modèle avec les 3 grosses valeurs
hist(maxima, breaks = 10, probability = TRUE, main = "Density Plot (avec 3 grosses valeurs)",
xlab = "Maxima annuels", col = "lightgray", border = "white")
lines(density(maxima), col = "blue", lwd = 2)  # Densité empirique
curve(dgev(x, loc = fitted$estimate["loc"],
scale = fitted$estimate["scale"],
shape = fitted$estimate["shape"]),
add = TRUE, col = "red", lwd = 2)  # Densité GEV ajustée
legend("topright", legend = c("Empirique", "GEV ajusté"),
col = c("blue", "red"), lwd = 2, bty = "n")
# Density Plot pour le modèle sans les 3 grosses valeurs
hist(maxima_trimmed, breaks = 10, probability = TRUE, main = "Density Plot (sans 3 grosses valeurs)",
xlab = "Maxima annuels", col = "lightgray", border = "white")
lines(density(maxima_trimmed), col = "blue", lwd = 2)  # Densité empirique
curve(dgev(x, loc = fitted_trimmed$estimate["loc"],
scale = fitted_trimmed$estimate["scale"],
shape = fitted_trimmed$estimate["shape"]),
add = TRUE, col = "red", lwd = 2)  # Densité GEV ajustée
legend("topright", legend = c("Empirique", "GEV ajusté"),
col = c("blue", "red"), lwd = 2, bty = "n")
# Réinitialisation pour éviter d'affecter d'autres tracés
par(mfrow = c(1, 1))  # Retour à une disposition par défaut
# Calcul du seuil (95ème percentile)
threshold <- quantile(sp500_returns, 0.95, na.rm = TRUE)
# Identification des rendements qui dépassent le seuil
extreme_points <- sp500_returns > threshold
# Vérification de la présence de valeurs TRUE dans extreme_points
if (any(extreme_points)) {
cat("Des points extrêmes sont présents dans la série temporelle.\n")
} else {
cat("Aucun point extrême n'a été détecté dans la série temporelle.\n")
}
# Tracer la série temporelle des rendements quotidiens du S&P 500
plot(sp500_returns, main = "Série temporelle des rendements quotidiens du S&P 500",
ylab = "Rendements quotidiens", col = "orange", type = "p")
# Mise en évidence des points extrêmes en bleu
points(sp500_returns[extreme_points], col = "blue", pch = 19)
fitted_pot <- fpot(sp500_returns,0.0155, npp=250)
fitted_pot
qq(fitted_pot)
fitted_pot_ajusted <- fpot(sp500_returns, 0.05, npp=250)
fitted_pot_ajusted
qq(fitted_pot_ajusted)
#0.07 à l'aide du MRL
fitted_pot_mrl <- fpot(sp500_returns, 0.035, npp=250)
fitted_pot_mrl
qq(fitted_pot_mrl)
# Calcul de l'AIC pour le modèle ajusté (seuil = 0.05)
aic_ajusted <- AIC(fitted_pot_ajusted)
# Calcul de l'AIC pour le modèle MRL (seuil = 0.035)
aic_mrl <- AIC(fitted_pot_mrl)
# Afficher les AIC des deux modèles
cat("AIC du modèle ajusté (seuil = 0.05) : ", aic_ajusted, "\n")
cat("AIC du modèle MRL (seuil = 0.035) : ", aic_mrl, "\n")
# Comparaison des AIC
if (aic_ajusted < aic_mrl) {
cat("Le modèle ajusté (seuil = 0.05) est préféré car il a un AIC plus faible.\n")
} else {
cat("Le modèle MRL (seuil = 0.035) est préféré car il a un AIC plus faible.\n")
}
rl(fitted_pot)
rl(fitted_pot_ajusted)
rl(fitted_pot_mrl)
mrlplot(sp500_returns, c(0, 0.1))
