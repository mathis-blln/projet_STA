geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 5. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 6. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 7. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
# 1. Préparer les variables exogènes avec les séries non différenciées
exog_train <- train_data %>%
select(Momemtum) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 1. Préparer les variables exogènes avec les séries non différenciées
exog_train <- train_data %>%
select(Momentum) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Ajuster le modèle ARIMAX sur train_data en utilisant les variables exogènes non différenciées
arimax_model <- arima(train_data$Adj.Close, order = c(4, 1, 5), xreg = exog_train)
# 3. Prédictions in-sample pour l'ensemble d'entraînement
fitted_arimax <- train_data$Adj.Close - residuals(arimax_model)
# 4. Calcul des métriques pour l'ensemble d'entraînement
rmse_arimax <- sqrt(mean(residuals(arimax_model)^2, na.rm = TRUE))
mae_arimax <- mean(abs(residuals(arimax_model)), na.rm = TRUE)
# 5. Affichage des performances
cat("Performance ARIMAX(4,1,5) avec GDPV, CPIH_YTYPCT et UNR_us:\n")
cat("RMSE :", rmse_arimax, "\n")
cat("MAE :", mae_arimax, "\n")
# 6. Visualiser les prédictions in-sample
plot_data_train <- data.frame(
Time = train_data$Date,  # Pas besoin d'exclure la première ligne ici
Observed = train_data$Adj.Close,
ARIMAX = fitted_arimax
)
ggplot(plot_data_train, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = ARIMAX, color = "ARIMAX"), linetype = "dashed") +
labs(title = "Modèle ARIMAX avec GDPV, CPIH_YTYPCT et UNR_us",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "ARIMAX" = "red")) +
theme_minimal()
# --------------------------------
# Prédictions sur l'ensemble de test
# --------------------------------
# 1. Préparer les variables exogènes avec les séries non différenciées pour l'ensemble de test
exog_test <- test_data %>%
select(Momentum) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Prédictions sur l'ensemble de test
predictions_test <- predict(arimax_model, n.ahead = nrow(exog_test), newxreg = exog_test)$pred
# 3. Créer le dataframe des prédictions
plot_data_test <- data.frame(
Time = test_data$Date,
Observed = test_data$Adj.Close,
Predicted = predictions_test
)
# 4. Visualisation des prédictions sur l'ensemble de test
ggplot(plot_data_test, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 5. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 6. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 7. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
# 1. Créer une copie de train_data pour effectuer la différenciation
train_data_diff <- train_data %>%
mutate(
GDPV_diff = c(NA, diff(GDPV)),  # Différenciation de GDPV
CPIH_YTYPCT_diff = c(NA, diff(CPIH_YTYPCT)),  # Différenciation de CPIH_YTYPCT
UNR_us_diff = c(NA, diff(UNR_us))  # Différenciation de UNR_us
)  # Différenciation des variables I(1)
# 2. Préparer les variables exogènes avec les trois variables différenciées
exog_train <- train_data_diff %>%
select(GDPV_diff) %>%
na.omit()  # Supprimer les lignes avec NA (première ligne après différenciation)
# 3. Ajuster le modèle ARIMAX sur train_data en utilisant les variables exogènes modifiées
arimax_model <- arima(train_data$Adj.Close[2:nrow(train_data)], order = c(4, 1, 5), xreg = exog_train)
# 4. Prédictions in-sample (ensemble d'entraînement)
fitted_arimax <- train_data$Adj.Close[2:nrow(train_data)] - residuals(arimax_model)
# 5. Calcul des métriques pour l'ensemble d'entraînement
rmse_arimax <- sqrt(mean(residuals(arimax_model)^2, na.rm = TRUE))
mae_arimax <- mean(abs(residuals(arimax_model)), na.rm = TRUE)
# 6. Affichage des performances
cat("Performance ARIMAX(4,1,5) avec GDPV_diff, CPIH_YTYPCT_diff et UNR_us_diff:\n")
cat("RMSE :", rmse_arimax, "\n")
cat("MAE :", mae_arimax, "\n")
# 7. Visualiser les prédictions in-sample
plot_data_train <- data.frame(
Time = train_data$Date[2:nrow(train_data)],
Observed = train_data$Adj.Close[2:nrow(train_data)],
ARIMAX = fitted_arimax
)
ggplot(plot_data_train, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = ARIMAX, color = "ARIMAX"), linetype = "dashed") +
labs(title = "Modèle ARIMAX avec GDPV_diff, CPIH_YTYPCT_diff et UNR_us_diff",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "ARIMAX" = "red")) +
theme_minimal()
# --------------------------------
# Prédictions sur l'ensemble de test
# --------------------------------
# 1. Créer une copie de test_data pour effectuer la différenciation
test_data_diff <- test_data %>%
mutate(
GDPV_diff = c(NA, diff(GDPV)),  # Différenciation de GDPV
CPIH_YTYPCT_diff = c(NA, diff(CPIH_YTYPCT)),  # Différenciation de CPIH_YTYPCT
UNR_us_diff = c(NA, diff(UNR_us))  # Différenciation de UNR_us
)
# 2. Préparer les variables exogènes avec les trois variables différenciées pour l'ensemble de test
exog_test <- test_data_diff %>%
select(GDPV_diff) %>%
na.omit()  # Supprimer les lignes avec NA (première ligne après différenciation)
# 3. Prédictions sur l'ensemble de test
predictions_test <- predict(arimax_model, n.ahead = nrow(exog_test), newxreg = exog_test)$pred
# 4. Créer le dataframe des prédictions
plot_data_test <- data.frame(
Time = test_data$Date[2:nrow(test_data)],
Observed = test_data$Adj.Close[2:nrow(test_data)],
Predicted = predictions_test
)
# 5. Visualisation des prédictions sur l'ensemble de test
ggplot(plot_data_test, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 6. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 7. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 8. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
# 1. Préparer les variables exogènes avec les séries non différenciées
exog_train <- train_data %>%
select(CCI) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Ajuster le modèle ARIMAX sur train_data en utilisant les variables exogènes non différenciées
arimax_model <- arima(train_data$Adj.Close, order = c(4, 1, 5), xreg = exog_train)
# 3. Prédictions in-sample pour l'ensemble d'entraînement
fitted_arimax <- train_data$Adj.Close - residuals(arimax_model)
# 4. Calcul des métriques pour l'ensemble d'entraînement
rmse_arimax <- sqrt(mean(residuals(arimax_model)^2, na.rm = TRUE))
mae_arimax <- mean(abs(residuals(arimax_model)), na.rm = TRUE)
# 5. Affichage des performances
cat("Performance ARIMAX(4,1,5) avec GDPV, CPIH_YTYPCT et UNR_us:\n")
cat("RMSE :", rmse_arimax, "\n")
cat("MAE :", mae_arimax, "\n")
# 6. Visualiser les prédictions in-sample
plot_data_train <- data.frame(
Time = train_data$Date,  # Pas besoin d'exclure la première ligne ici
Observed = train_data$Adj.Close,
ARIMAX = fitted_arimax
)
ggplot(plot_data_train, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = ARIMAX, color = "ARIMAX"), linetype = "dashed") +
labs(title = "Modèle ARIMAX avec GDPV, CPIH_YTYPCT et UNR_us",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "ARIMAX" = "red")) +
theme_minimal()
# --------------------------------
# Prédictions sur l'ensemble de test
# --------------------------------
# 1. Préparer les variables exogènes avec les séries non différenciées pour l'ensemble de test
exog_test <- test_data %>%
select(CCI) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Prédictions sur l'ensemble de test
predictions_test <- predict(arimax_model, n.ahead = nrow(exog_test), newxreg = exog_test)$pred
# 3. Créer le dataframe des prédictions
plot_data_test <- data.frame(
Time = test_data$Date,
Observed = test_data$Adj.Close,
Predicted = predictions_test
)
# 4. Visualisation des prédictions sur l'ensemble de test
ggplot(plot_data_test, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 5. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 6. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 7. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
# 1. Préparer les variables exogènes avec les séries non différenciées
exog_train <- train_data %>%
select(Stochastic_K) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Ajuster le modèle ARIMAX sur train_data en utilisant les variables exogènes non différenciées
arimax_model <- arima(train_data$Adj.Close, order = c(4, 1, 5), xreg = exog_train)
# 3. Prédictions in-sample pour l'ensemble d'entraînement
fitted_arimax <- train_data$Adj.Close - residuals(arimax_model)
# 4. Calcul des métriques pour l'ensemble d'entraînement
rmse_arimax <- sqrt(mean(residuals(arimax_model)^2, na.rm = TRUE))
mae_arimax <- mean(abs(residuals(arimax_model)), na.rm = TRUE)
# 5. Affichage des performances
cat("Performance ARIMAX(4,1,5) avec GDPV, CPIH_YTYPCT et UNR_us:\n")
cat("RMSE :", rmse_arimax, "\n")
cat("MAE :", mae_arimax, "\n")
# 6. Visualiser les prédictions in-sample
plot_data_train <- data.frame(
Time = train_data$Date,  # Pas besoin d'exclure la première ligne ici
Observed = train_data$Adj.Close,
ARIMAX = fitted_arimax
)
ggplot(plot_data_train, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = ARIMAX, color = "ARIMAX"), linetype = "dashed") +
labs(title = "Modèle ARIMAX avec GDPV, CPIH_YTYPCT et UNR_us",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "ARIMAX" = "red")) +
theme_minimal()
# --------------------------------
# Prédictions sur l'ensemble de test
# --------------------------------
# 1. Préparer les variables exogènes avec les séries non différenciées pour l'ensemble de test
exog_test <- test_data %>%
select(Stochastic_K) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Prédictions sur l'ensemble de test
predictions_test <- predict(arimax_model, n.ahead = nrow(exog_test), newxreg = exog_test)$pred
# 3. Créer le dataframe des prédictions
plot_data_test <- data.frame(
Time = test_data$Date,
Observed = test_data$Adj.Close,
Predicted = predictions_test
)
# 4. Visualisation des prédictions sur l'ensemble de test
ggplot(plot_data_test, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 5. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 6. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 7. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
# 1. Préparer les variables exogènes avec les séries non différenciées
exog_train <- train_data %>%
select(Stochastic_D) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Ajuster le modèle ARIMAX sur train_data en utilisant les variables exogènes non différenciées
arimax_model <- arima(train_data$Adj.Close, order = c(4, 1, 5), xreg = exog_train)
# 3. Prédictions in-sample pour l'ensemble d'entraînement
fitted_arimax <- train_data$Adj.Close - residuals(arimax_model)
# 4. Calcul des métriques pour l'ensemble d'entraînement
rmse_arimax <- sqrt(mean(residuals(arimax_model)^2, na.rm = TRUE))
mae_arimax <- mean(abs(residuals(arimax_model)), na.rm = TRUE)
# 5. Affichage des performances
cat("Performance ARIMAX(4,1,5) avec GDPV, CPIH_YTYPCT et UNR_us:\n")
cat("RMSE :", rmse_arimax, "\n")
cat("MAE :", mae_arimax, "\n")
# 6. Visualiser les prédictions in-sample
plot_data_train <- data.frame(
Time = train_data$Date,  # Pas besoin d'exclure la première ligne ici
Observed = train_data$Adj.Close,
ARIMAX = fitted_arimax
)
ggplot(plot_data_train, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = ARIMAX, color = "ARIMAX"), linetype = "dashed") +
labs(title = "Modèle ARIMAX avec GDPV, CPIH_YTYPCT et UNR_us",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "ARIMAX" = "red")) +
theme_minimal()
# --------------------------------
# Prédictions sur l'ensemble de test
# --------------------------------
# 1. Préparer les variables exogènes avec les séries non différenciées pour l'ensemble de test
exog_test <- test_data %>%
select(Stochastic_D) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Prédictions sur l'ensemble de test
predictions_test <- predict(arimax_model, n.ahead = nrow(exog_test), newxreg = exog_test)$pred
# 3. Créer le dataframe des prédictions
plot_data_test <- data.frame(
Time = test_data$Date,
Observed = test_data$Adj.Close,
Predicted = predictions_test
)
# 4. Visualisation des prédictions sur l'ensemble de test
ggplot(plot_data_test, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 5. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 6. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 7. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
# 1. Préparer les variables exogènes avec les séries non différenciées
exog_train <- train_data %>%
select(Return) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Ajuster le modèle ARIMAX sur train_data en utilisant les variables exogènes non différenciées
arimax_model <- arima(train_data$Adj.Close, order = c(4, 1, 5), xreg = exog_train)
# 3. Prédictions in-sample pour l'ensemble d'entraînement
fitted_arimax <- train_data$Adj.Close - residuals(arimax_model)
# 4. Calcul des métriques pour l'ensemble d'entraînement
rmse_arimax <- sqrt(mean(residuals(arimax_model)^2, na.rm = TRUE))
mae_arimax <- mean(abs(residuals(arimax_model)), na.rm = TRUE)
# 5. Affichage des performances
cat("Performance ARIMAX(4,1,5) avec GDPV, CPIH_YTYPCT et UNR_us:\n")
cat("RMSE :", rmse_arimax, "\n")
cat("MAE :", mae_arimax, "\n")
# 6. Visualiser les prédictions in-sample
plot_data_train <- data.frame(
Time = train_data$Date,  # Pas besoin d'exclure la première ligne ici
Observed = train_data$Adj.Close,
ARIMAX = fitted_arimax
)
ggplot(plot_data_train, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = ARIMAX, color = "ARIMAX"), linetype = "dashed") +
labs(title = "Modèle ARIMAX avec GDPV, CPIH_YTYPCT et UNR_us",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "ARIMAX" = "red")) +
theme_minimal()
# --------------------------------
# Prédictions sur l'ensemble de test
# --------------------------------
# 1. Préparer les variables exogènes avec les séries non différenciées pour l'ensemble de test
exog_test <- test_data %>%
select(Return) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Prédictions sur l'ensemble de test
predictions_test <- predict(arimax_model, n.ahead = nrow(exog_test), newxreg = exog_test)$pred
# 3. Créer le dataframe des prédictions
plot_data_test <- data.frame(
Time = test_data$Date,
Observed = test_data$Adj.Close,
Predicted = predictions_test
)
# 4. Visualisation des prédictions sur l'ensemble de test
ggplot(plot_data_test, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 5. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 6. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 7. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
# 1. Préparer les variables exogènes avec les séries non différenciées
exog_train <- train_data %>%
select(Close_minus_Open) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Ajuster le modèle ARIMAX sur train_data en utilisant les variables exogènes non différenciées
arimax_model <- arima(train_data$Adj.Close, order = c(4, 1, 5), xreg = exog_train)
# 3. Prédictions in-sample pour l'ensemble d'entraînement
fitted_arimax <- train_data$Adj.Close - residuals(arimax_model)
# 4. Calcul des métriques pour l'ensemble d'entraînement
rmse_arimax <- sqrt(mean(residuals(arimax_model)^2, na.rm = TRUE))
mae_arimax <- mean(abs(residuals(arimax_model)), na.rm = TRUE)
# 5. Affichage des performances
cat("Performance ARIMAX(4,1,5) avec GDPV, CPIH_YTYPCT et UNR_us:\n")
cat("RMSE :", rmse_arimax, "\n")
cat("MAE :", mae_arimax, "\n")
# 6. Visualiser les prédictions in-sample
plot_data_train <- data.frame(
Time = train_data$Date,  # Pas besoin d'exclure la première ligne ici
Observed = train_data$Adj.Close,
ARIMAX = fitted_arimax
)
ggplot(plot_data_train, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = ARIMAX, color = "ARIMAX"), linetype = "dashed") +
labs(title = "Modèle ARIMAX avec GDPV, CPIH_YTYPCT et UNR_us",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "ARIMAX" = "red")) +
theme_minimal()
# --------------------------------
# Prédictions sur l'ensemble de test
# --------------------------------
# 1. Préparer les variables exogènes avec les séries non différenciées pour l'ensemble de test
exog_test <- test_data %>%
select(Close_minus_Open) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Prédictions sur l'ensemble de test
predictions_test <- predict(arimax_model, n.ahead = nrow(exog_test), newxreg = exog_test)$pred
# 3. Créer le dataframe des prédictions
plot_data_test <- data.frame(
Time = test_data$Date,
Observed = test_data$Adj.Close,
Predicted = predictions_test
)
# 4. Visualisation des prédictions sur l'ensemble de test
ggplot(plot_data_test, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 5. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 6. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 7. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
# 1. Préparer les variables exogènes avec les séries non différenciées
exog_train <- train_data %>%
select(Stochastic_K) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Ajuster le modèle ARIMAX sur train_data en utilisant les variables exogènes non différenciées
arimax_model <- arima(train_data$Adj.Close, order = c(4, 1, 5), xreg = exog_train)
# 3. Prédictions in-sample pour l'ensemble d'entraînement
fitted_arimax <- train_data$Adj.Close - residuals(arimax_model)
# 4. Calcul des métriques pour l'ensemble d'entraînement
rmse_arimax <- sqrt(mean(residuals(arimax_model)^2, na.rm = TRUE))
mae_arimax <- mean(abs(residuals(arimax_model)), na.rm = TRUE)
# 5. Affichage des performances
cat("Performance ARIMAX(4,1,5) avec GDPV, CPIH_YTYPCT et UNR_us:\n")
cat("RMSE :", rmse_arimax, "\n")
cat("MAE :", mae_arimax, "\n")
# 6. Visualiser les prédictions in-sample
plot_data_train <- data.frame(
Time = train_data$Date,  # Pas besoin d'exclure la première ligne ici
Observed = train_data$Adj.Close,
ARIMAX = fitted_arimax
)
ggplot(plot_data_train, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = ARIMAX, color = "ARIMAX"), linetype = "dashed") +
labs(title = "Modèle ARIMAX avec GDPV, CPIH_YTYPCT et UNR_us",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "ARIMAX" = "red")) +
theme_minimal()
# --------------------------------
# Prédictions sur l'ensemble de test
# --------------------------------
# 1. Préparer les variables exogènes avec les séries non différenciées pour l'ensemble de test
exog_test <- test_data %>%
select(Stochastic_K) %>%
na.omit()  # Supprimer les lignes avec NA (si nécessaire)
# 2. Prédictions sur l'ensemble de test
predictions_test <- predict(arimax_model, n.ahead = nrow(exog_test), newxreg = exog_test)$pred
# 3. Créer le dataframe des prédictions
plot_data_test <- data.frame(
Time = test_data$Date,
Observed = test_data$Adj.Close,
Predicted = predictions_test
)
# 4. Visualisation des prédictions sur l'ensemble de test
ggplot(plot_data_test, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Predicted, color = "Predicted"), linetype = "dashed") +
labs(title = "Prédictions ARIMAX sur l'ensemble de test",
x = "Date", y = "Adj.Close") +
scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
theme_minimal()
# 5. Calculer les erreurs pour l'ensemble de test
errors_test <- plot_data_test$Observed - plot_data_test$Predicted
# 6. Calculer RMSE et MAE pour l'ensemble de test
rmse_test <- sqrt(mean(errors_test^2))
mae_test <- mean(abs(errors_test))
# 7. Afficher les résultats pour l'ensemble de test
cat("Performance du modèle ARIMAX sur l'ensemble de test :\n")
cat("RMSE :", rmse_test, "\n")
cat("MAE :", mae_test, "\n")
